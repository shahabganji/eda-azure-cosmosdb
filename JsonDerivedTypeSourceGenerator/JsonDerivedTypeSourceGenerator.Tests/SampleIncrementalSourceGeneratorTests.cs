using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace JsonDerivedTypeSourceGenerator.Tests;

public class SampleIncrementalSourceGeneratorTests
{
    private const string SourceText = @"
namespace EventSourcingCosmosDB.Events;


public abstract partial class Event : IAmStreamEvent
{
    public abstract Guid StreamId { get; }
    public DateTime CreatedAtUtc { get; } = DateTime.UtcNow;

    [JsonPropertyName(""pk"")] public string Pk => StreamId.ToString();
    [JsonPropertyName(""id"")] public string Id => CreatedAtUtc.ToString(""O"");

    protected Event() { }
    
}

public class CustomerCreated : Event
{
    public required Guid CustomerId { get; set; }
    public required string FullName { get; set; }
    public required string Email { get; set; }
    public required DateTime DateOfBirth { get; set; }

    public override Guid StreamId => CustomerId;
}

";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>

using System.Text.Json.Serialization;

namespace EventSourcingCosmosDB.Events;

[JsonPolymorphic(IgnoreUnrecognizedTypeDiscriminators = true)]
[JsonDerivedType(typeof(CustomerCreated), nameof(CustomerCreated))]
public abstract partial class Event { }
";

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new SampleIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(SampleIncrementalSourceGenerator),
            [CSharpSyntaxTree.ParseText(SourceText)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("EventJsonAttributes.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}
